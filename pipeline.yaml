trigger:
  branches:
    include:
      - main  

pool:
  name: 'my-pc'

variables:
  BuildConfiguration: 'Release'
  ProjectName: 'HelloWorld'
  PublishDirectory: '$(Build.ArtifactStagingDirectory)/publish'
  IISSiteName: 'MyWebApp'

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: Build
    displayName: 'Build .NET Core Application'
    steps:
    - task: UseDotNet@2
      displayName: 'Install .NET SDK'
      inputs:
        packageType: 'sdk'
        version: '8.x'  
    - script: |
        dotnet restore
        dotnet build --configuration $(BuildConfiguration)
      displayName: 'Restore and Build the Application'
- stage: Publish
  displayName: 'Publish Stage'
  dependsOn: Build
  jobs:
  - job: Publish
    displayName: 'Publish .NET Core Application'
    steps:
    - task: UseDotNet@2
      displayName: 'Install .NET SDK'
      inputs:
        packageType: 'sdk'
        version: '8.x' 

    - script: |
        dotnet publish $(ProjectName).csproj --configuration $(BuildConfiguration) --output $(PublishDirectory)
      displayName: 'Publish the Application'

- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: Publish
  jobs:
  - job: Deploy
    displayName: 'Deploy to IIS'
    steps:
    - script: |
        echo "Deploying to IIS..."
        Remove-WebSite -Name $(IISSiteName) -ErrorAction SilentlyContinue
        New-Item -Path "C:\inetpub\wwwroot\$(IISSiteName)" -ItemType Directory -Force
        Copy-Item -Recurse -Path $(PublishDirectory)\* -Destination "C:\inetpub\wwwroot\$(IISSiteName)\"
        New-WebSite -Name $(IISSiteName) -Port 80 -PhysicalPath "C:\inetpub\wwwroot\$(IISSiteName)" -ApplicationPool "DefaultAppPool"
      displayName: 'Deploy to IIS'
      condition: succeeded()
      env:
        # Gerekli IIS yönetimi izinlerini sağlamak için çevresel değişkenleri ekleyebilirsiniz
        SYSTEM_ACL: $(Build.ArtifactStagingDirectory)/publish

