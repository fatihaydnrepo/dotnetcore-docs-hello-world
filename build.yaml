trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  dockerRegistryServiceConnection: 'DockerHubConnection'
  dockerHubUsername: 'reptilianusbileciktus'
  dockerHubRepository: 'reptilianusbileciktus/dotnetcore-docs-hello-world-linux'
  dockerImageTag: 'latest'

stages:
- stage: Build
  displayName: 'Build ve Test'
  jobs:
  - job: BuildAndTest
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK'
      inputs:
        packageType: 'sdk'
        version: '8.0.x'
        
    - script: dotnet restore
      displayName: 'Restore Packages'
      
    - script: dotnet build --configuration $(buildConfiguration)
      displayName: 'Build Application'
      
    - script: dotnet test --configuration $(buildConfiguration) --no-build
      displayName: 'Run Tests'
      continueOnError: true
      
    - task: DotNetCoreCLI@2
      displayName: 'Publish Application'
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: Deploy
  displayName: 'Deploy to Docker Hub'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: DeployToDockerHub
    steps:
    - task: Docker@2
      displayName: 'Login to Docker Hub'
      inputs:
        command: 'login'
        containerRegistry: '$(dockerRegistryServiceConnection)'

    - script: |
        docker build -f Dockerfile.linux -t $(dockerHubRepository):$(dockerImageTag) .
        docker push $(dockerHubRepository):$(dockerImageTag)
      displayName: 'Build and Push Docker Image to Docker Hub'
